{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project Phase 4\n",
    "### Samantha Rubin, Hanwen Lin, Liz Espinoza, and Hanna Kang"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "The coronavirus disease has resulted in an ongoing pandemic affecting over 200 countries and territories. As of April 2021, there have been over 147 million cases and 3 million deaths worldwide. Several factors such as age groups, testing rates and airport traffic have statistically proven to affect trends in positive coronavirus cases in many countries. However, given that the coronavirus is rapidly changing, there is a lack of studied statistical relationships between high rates in COVID cases and economic indicators such as GDP per capita, Gini index, and employment rates. Due to the fact that the economic performance of a country oftentimes indicates its ability to provide adequate living standards and health resources, poorer countries frequently lack proper sanitation, prevention or health programs that work to combat the threat of diseases. Because of these considerations, we hypothesize that countries with poorer economic performances in terms of GDP, Gini index, and unemployment rates would experience higher levels of positive COVID cases. \n",
    "To address these concerns, we studied the relationships between factors such as wealth inequality (Gini index) and high rates of positive COVID cases in relation to the total population and COVID deaths across different countries. In efforts to gain a further understanding, we also presented an analysis of the correlation between GDP per capita and high rates of positive COVID cases throughout countries. We ultimately hoped to discover the potential trend between the ratio of positive case results to COVID deaths and a country’s GDP and/or Gini index. Through the use of multivariate regressions, linear regressions and factorial ANOVA statistical tests, we were able to explore potential trends between these economic indicators and coronavirus cases across affected countries. \n",
    "The outcomes of our study showed, surprisingly, that countries with higher GDPs were more likely to have higher COVID rates, and that when trying to predict the cumulative positive cases of a country, the most likely and probable way would be to use GDP per capita, Gini index, unemployment rates, and population density.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Description\n",
    "There is not a lot of information on the relationship between wealth inequality (quantified by the Gini index), GDP per capita and other factors, and high rates of positive COVID-19 cases and/or COVID-19 deaths across different countries. This is especially the case as COVID-19 is ongoing and trends are rapidly changing. To address this, we have chosen to analyze six datasets. The first dataset contains data from the Joint Research Centre (JRC), which was made to further understand COVID-19, to predict any potential impacts, and to support future planning. Included columns are cumulative positive and cumulative recovered COVID-19 cases, as well as cumulative deceased and the number of hospitalized and intensive care patients. Rows in this dataset include the names of countries and their respective country codes. \n",
    "The other five datasets are simpler, only having data of country names and codes, and their respective Gini indexes, GDP per capita, population, population density, and unemployment rates. These were created to look at all of the Gini indexes, GDP per capita, population, population density, and unemployment rates of countries. We will only be analyzing countries that have all of these values, and that are also on the COVID-19 dataset, matching by country code. \n",
    "Analysis on these datasets will help to find potential relationships between COVID-19 cases and factors such as Gini index, GDP, population, population density, and unemployment rate.   Through this, we hope to determine how the wealth of a country changes how it has been affected by COVID-19.\n",
    "\n",
    "\n",
    "- Gini index and Gini coefficient (Gini index in %) measure \"the distribution of income across a population.\" For a country, the higher the Gini index, the more unequal the wealth distribution among its population.\n",
    "\n",
    "- GDP (Gross Domestic Product) per capita measures a country's \"economic output divided by its population.\" It is a good representation of the standard of living in a country: the higher the GDP per capita, the better the standard of living, and the more that each \"citizen benefits from their country's economy\".\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregistration Statement\n",
    "*Analysis 1:* We will use a multivariable regression model that uses Gini Index, GDP per capita, population density, and unemployment rates as inputs to predict cumulative positive COVID cases and cumulative COVID deaths.\n",
    "\n",
    "*Analysis 2:* We will calculate a factorial ANOVA using the cells described below*.  This will help determine if the difference in mean of covid data in countries with different economic indices is statistically significant. \n",
    "\n",
    "|             | Low GDP | Medium GDP | High GDP  |\n",
    "|-------------|---------|------------|-----------|\n",
    "| Low Gini    | 1       | 2          | 3         |\n",
    "| Medium Gini | 4       | 5          | 6         |\n",
    "| High Gini   | 7       | 8          | 9         |\n",
    "\n",
    "**the scores in the table are dummy scores used for demonstration purposes only*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What is a two-way ANOVA Test?\n",
    "\n",
    "Factorial or two-way ANOVA (Analysis of Variance) is a test that\n",
    "measures the effect of 2 categorical indepedent variables (factors) on 1 continuous dependent variable. The test aims to find whether 1) one factor, the other, or both contribute significantly to the outcome (i.e. \"main effects\"), and 2) the two factors interact in their efficacy (i.e. \"interaction effects\" ).\n",
    "\n",
    "##### Some key terms:\n",
    "\n",
    "- \"catagorical independent variables\"\n",
    "    - ANOVA requires categorical data––that is, for every indepedent variable (e.g. GDP per capita), the scores are divided into two or more levels (e.g. low GDP per capita, medium GDP per capita and high GDP per capita). \n",
    "    \n",
    "- \"main effects\"\n",
    "    - Main effects = differences in marginal means (among the levels of ONE factor). For example, if a main effect of GDP per capita exists, the dependent variable's marginal means would differ among low, medium and high GDP per Capita, ceteris paribus.\n",
    "\n",
    "- \"interaction effects\"\n",
    "    - Interaction effect =  mean differences across factors. It means that the effect of one factor depends on the state of the other factor. For example, a given amount of sunlight have a more powerful effect on a plant's growth if the plant also has sufficient, as opposed to insufficient, nutrition from soil. In our case, a dummy example of a significant interaction effect can be: Gini index may have a greater influence on a country's Covid data if that country has high, as opposed to medium or low, GDP per capita. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we import some our data as well as the libraries we will use for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "\n",
    "covid_data = pd.read_csv('covid_data.csv')\n",
    "anova_df=pd.read_csv('anova_df.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Models:\n",
    "Below are several models we use to try predicting positive COVID cases per capita, COVID deaths per capita, and the ratio of COVID deaths to COVID positives based on different predictor variables including GDP per capita, Gini index, unemployment rate and population density."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1: Predict cumulative positive COVID cases per capita (Y) based on GDP per capita (X) [Linear Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared: 0.241\n"
     ]
    }
   ],
   "source": [
    "pos_gdp_regressor = LinearRegression()\n",
    "\n",
    "pos_gdp_reshapeX = np.reshape(covid_data[['gdp_per_cap']], (-1, 1))\n",
    "\n",
    "\n",
    "pos_gdp_regressor.fit(pos_gdp_reshapeX, covid_data['cpos_norm'])\n",
    "\n",
    "pos_gdp_pred = pos_gdp_regressor.predict(pos_gdp_reshapeX)\n",
    "\n",
    "plt.scatter(pos_gdp_reshapeX, covid_data['cpos_norm'], alpha = 0.8)\n",
    "plt.scatter(pos_gdp_reshapeX, pos_gdp_pred, c ='lightgreen', alpha = 0.8)\n",
    "plt.title('Cumulative Positive Cases based on GDP per capita (Linear)')\n",
    "plt.xlabel('gdp_per_cap')\n",
    "plt.ylabel('cumulative positives per capita')\n",
    "plt.legend(['observed', 'predicted'])\n",
    "\n",
    "plt.show()\n",
    "print(\"r squared: {:.3f}\".format(pos_gdp_regressor.score(pos_gdp_reshapeX, covid_data['cpos_norm'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This graph shows a clear positive trend, though it is not perfectly linear.  With an $r^2$ value of 0.241, we find that about a quarter of the variance in positive COVID cases per capita can be explained using a linear model with a country's GDP per capita.  It may be surprising that higher GDPs correspond to higher COVID rates per capita, though this could simply be due to higher testing rates.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2: Predict cumulative positive COVID cases per capita (Y) based on Gini index (X) [Linear Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared: 0.10\n"
     ]
    }
   ],
   "source": [
    "pos_gini_regressor = LinearRegression()\n",
    "\n",
    "pos_gini_reshapeX = np.reshape(covid_data[['gini_index']], (-1, 1))\n",
    "\n",
    "\n",
    "pos_gini_regressor.fit(pos_gini_reshapeX, covid_data['cpos_norm'])\n",
    "\n",
    "pos_gini_pred = pos_gini_regressor.predict(pos_gini_reshapeX)\n",
    "\n",
    "plt.scatter(pos_gini_reshapeX, covid_data['cpos_norm'], alpha = 0.8)\n",
    "plt.scatter(pos_gini_reshapeX, pos_gini_pred, c ='lightgreen', alpha = 0.8)\n",
    "plt.title('Cumulative Positive Cases based on Gini Index (Linear)')\n",
    "plt.xlabel('gini_index')\n",
    "plt.ylabel('cumulative pos per capita')\n",
    "plt.legend(['observed', 'predicted'])\n",
    "\n",
    "plt.show()\n",
    "print(\"r squared: {:.2f}\".format(pos_gini_regressor.score(pos_gini_reshapeX, covid_data['cpos_norm'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we see a negative trend, with a $r^2$ value of 0.10.  This means that countries with more income inequality are expected to have lower COVID positive rates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3: Predict cumulative positive COVID cases per capita (Y) based on population density (X) [Linear Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared: 0.0006\n"
     ]
    }
   ],
   "source": [
    "pos_den_regressor = LinearRegression()\n",
    "\n",
    "pos_den_regressor.fit(covid_data[['pop_density']], covid_data['cpos_norm'])\n",
    "\n",
    "pos_den_pred = pos_den_regressor.predict(covid_data[['pop_density']])\n",
    "\n",
    "%matplotlib inline\n",
    "plt.scatter(covid_data['pop_density'], covid_data['cpos_norm'], alpha = 0.8)\n",
    "plt.scatter(covid_data['pop_density'], pos_den_pred, c ='lightgreen', alpha = 0.8)\n",
    "plt.title('Cumulative Positive Cases based on Population Density (Linear)')\n",
    "plt.xlabel('population density')\n",
    "plt.ylabel('cumulative positives per capita')\n",
    "plt.legend(['observed', 'predicted'])\n",
    "plt.show()\n",
    "print(\"r squared: {:.4f}\".format(pos_den_regressor.score(covid_data[['pop_density']], covid_data['cpos_norm'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With an $r^2$ value of 0.0006, this trend is very weak.  There is not a strong correlation between population density and cumulative positives per capita."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4: Predict cumulative positive COVID cases per capita (Y) based on unemployment rates (X) [Linear Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r squared: 0.0083\n"
     ]
    }
   ],
   "source": [
    "pos_rates_regressor = LinearRegression()\n",
    "\n",
    "pos_rates_regressor.fit(covid_data[['unemploy_rates']], covid_data['cpos_norm'])\n",
    "\n",
    "pos_rates_pred = pos_rates_regressor.predict(covid_data[['unemploy_rates']])\n",
    "\n",
    "plt.scatter(covid_data[['unemploy_rates']], covid_data['cpos_norm'], alpha = 0.8)\n",
    "plt.scatter(covid_data[['unemploy_rates']], pos_rates_pred, c ='lightgreen', alpha = 0.8)\n",
    "plt.title('Cumulative Positive Cases based on Unemployment Rates (Linear)')\n",
    "plt.xlabel('unemploy_rates')\n",
    "plt.ylabel('cumulative_pos per cap')\n",
    "plt.legend(['observed', 'predicted'])\n",
    "\n",
    "plt.show()\n",
    "print(\"r squared: {:.4f}\".format(pos_rates_regressor.score(covid_data[['unemploy_rates']], covid_data['cpos_norm'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unemployment rate on its own is not a strong predictor of positive COVID rates. This is shown by the low $r^2$ value of 0.0083."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5: Using GDP per capita, Gini index, population density, and unemployment rates to predict the cumulative positive COVID cases per capita [Multivariable Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gdp_per_cap coefficient: 6.376E-07\n",
      "gini_index coefficient: -7.104E-04\n",
      "population density coefficient: -4.464E-07\n",
      "unemployment rates coefficient: 1.144E-03\n",
      "r squared: 0.2980\n"
     ]
    }
   ],
   "source": [
    "multi_model = LinearRegression()\n",
    "multi_model.fit(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['cpos_norm'])\n",
    "print('gdp_per_cap coefficient: {:.3E}'.format(multi_model.coef_[0]))\n",
    "print('gini_index coefficient: {:.3E}'.format(multi_model.coef_[1]))\n",
    "print('population density coefficient: {:.3E}'.format(multi_model.coef_[2]))\n",
    "print('unemployment rates coefficient: {:.3E}'.format(multi_model.coef_[3]))\n",
    "\n",
    "score = multi_model.score(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['cpos_norm'])\n",
    "print('r squared: {:.4f}'.format(score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using a multivariate regression, we are able to get an $r^2$ value of almost 0.3.  This means that using predictors of GDP per capita, Gini index, population density, and unemployment rates, we are able to predict 30% of the variance in positive COVID rates.  This multivariate model is therefore better than any of the bivariate models tested above.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6: Using GDP per capita, Gini index, population density, and unemployment rates to predict COVID deaths per capita [Multivariable Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gdp_per_cap coefficient: 1.026E-08\n",
      "gini_index coefficient: -1.199E-05\n",
      "population density coefficient: -1.665E-07\n",
      "unemployment rates coefficient: 1.958E-05\n",
      "r squared: 0.1914\n"
     ]
    }
   ],
   "source": [
    "multi_model_dec = LinearRegression()\n",
    "multi_model_dec.fit(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['cdec_norm'])\n",
    "print('gdp_per_cap coefficient: {:.3E}'.format(multi_model_dec.coef_[0]))\n",
    "print('gini_index coefficient: {:.3E}'.format(multi_model_dec.coef_[1]))\n",
    "print('population density coefficient: {:.3E}'.format(multi_model_dec.coef_[2]))\n",
    "print('unemployment rates coefficient: {:.3E}'.format(multi_model_dec.coef_[3]))\n",
    "\n",
    "score_dec = multi_model_dec.score(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['cdec_norm'])\n",
    "print('r squared: {:.4f}'.format(score_dec))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The $r^2$ value of 0.2 shows that COVID death rates are less strongly correlated with our predictors than COVID positive rates.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7: Using GDP per capita, Gini index, population density, and unemployment rates to predict ratio of COVID deaths to COVID positives [Multivariable Regression]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gdp_per_cap coefficient: -3.711E-08\n",
      "gini_index coefficient: 1.005E-04\n",
      "population density coefficient: -5.804E-06\n",
      "unemployment rates coefficient: 6.881E-05\n",
      "r squared: 0.0244\n"
     ]
    }
   ],
   "source": [
    "multi_model_ratio = LinearRegression()\n",
    "multi_model_ratio.fit(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['dec_pos_ratio'])\n",
    "\n",
    "\n",
    "print('gdp_per_cap coefficient: {:.3E}'.format(multi_model_ratio.coef_[0]))\n",
    "print('gini_index coefficient: {:.3E}'.format(multi_model_ratio.coef_[1]))\n",
    "print('population density coefficient: {:.3E}'.format(multi_model_ratio.coef_[2]))\n",
    "print('unemployment rates coefficient: {:.3E}'.format(multi_model_ratio.coef_[3]))\n",
    "\n",
    "score_ratio = multi_model_ratio.score(covid_data[['gdp_per_cap', 'gini_index', 'pop_density','unemploy_rates']], covid_data['dec_pos_ratio'])\n",
    "print('r squared: {:.4f}'.format(score_ratio))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The variance in the ratio of COVID deaths to COVID positives is not explained by our predictors, since the $r^2$ value is very low (0.02)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ANOVA Test:\n",
    "\n",
    "We will perform a two-way ANOVA (“analysis of variance”) to determine __how the GDP per capita and gini index of a country affect cumulative COVID cases per capita, and if there are any interaction effects between GDP per capita and Gini index__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum_sq</th>\n",
       "      <th>df</th>\n",
       "      <th>F</th>\n",
       "      <th>PR(&gt;F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C(gdp_group)</th>\n",
       "      <td>0.032779</td>\n",
       "      <td>2.0</td>\n",
       "      <td>32.692245</td>\n",
       "      <td>3.657800e-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(gini_group)</th>\n",
       "      <td>0.004625</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.612961</td>\n",
       "      <td>1.165647e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(gdp_group):C(gini_group)</th>\n",
       "      <td>0.002108</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.051422</td>\n",
       "      <td>3.835344e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Residual</th>\n",
       "      <td>0.063167</td>\n",
       "      <td>126.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              sum_sq     df          F        PR(>F)\n",
       "C(gdp_group)                0.032779    2.0  32.692245  3.657800e-12\n",
       "C(gini_group)               0.004625    2.0   4.612961  1.165647e-02\n",
       "C(gdp_group):C(gini_group)  0.002108    4.0   1.051422  3.835344e-01\n",
       "Residual                    0.063167  126.0        NaN           NaN"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing libraries to help with ANOVA\n",
    "import statsmodels.api as sm\n",
    "# performing our ANOVA analysis:\n",
    "from statsmodels.formula.api import ols\n",
    "#reference:https://www.statology.org/two-way-anova-python/\n",
    "model = ols('cpos_norm ~ C(gdp_group) + C(gini_group) + C(gdp_group):C(gini_group)', data=anova_df).fit()\n",
    "sm.stats.anova_lm(model, typ=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Setting the significance level to 0.05 (p<0.05), we compare the PR(>F) value for each independent variable to the significance level:\n",
    "\n",
    "Main effect GDP per capita: F(2,126) = 32.69, p<0.05. Since the p-value of gdp_group (3.658e-12) is much lower than 0.05, we can conclude that GDP per capita has a statistically significant effect on a country's cumulative positive rate per capita.\n",
    "\n",
    "Main effect Gini index: F(2,126) = 4.61, p<0.05. Since the p-value of gini_group (0.012) is also lower than 0.05, we can also conclude that G\n",
    "ini index has a statistically significant effect on a country's cumulative positive rate per capita. \n",
    "\n",
    "Interaction effect: F(4,126) = 1.05, p>0.05. Since the p-value of interaction (3.835) is higher than 0.05, we can conclude that there is no significant interaction effect on a country's cumulative positive rate per capita. By interaction effect, we mean the effect of one independent variable depends on the state of the other independent variable (e.g. rich sunlight may have a more powerful effect on plant growth if the water is sufficient, as opposed to insufficient). Here, such interaction between GDP per capita and Gini index does not exist."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation of Significance (Linear Models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train test split\n",
    "Here we use train_test_split to split our data into a \"train\" portion (80%) and a \"test\" portion (the remaining 20%).  We fit a linear model to the train data, and see how well it performs comparatively on the test data.  This tests whether our model is overfitted to our data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average r squared for train datasets: 0.241\n",
      "Average r squared for test datasets: 0.190\n",
      "Average difference in test and train scores: 0.178\n"
     ]
    }
   ],
   "source": [
    "n_tts = 100\n",
    "test_scores=[]\n",
    "train_scores=[]\n",
    "\n",
    "for i in range(n_tts):\n",
    "    train_gdp, test_gdp, train_pos, test_pos = train_test_split(covid_data[\"gdp_per_cap\"]\n",
    "                                                            , covid_data['cpos_norm'], test_size = 0.20)\n",
    "    regressor_gdp = LinearRegression().fit(np.array(train_gdp).reshape(-1,1), train_pos)\n",
    "    train_scores.append(regressor_gdp.score(np.array(train_gdp).reshape(-1,1), train_pos))\n",
    "    \n",
    "    #how well can we predict the test set?\n",
    "    accuracy_test = regressor_gdp.score(np.array(test_gdp).reshape(-1,1), test_pos)\n",
    "    test_scores.append(accuracy_test)\n",
    "\n",
    "abs_difference=[]\n",
    "for i in range(n_tts):\n",
    "    abs_difference.append(abs(train_scores[i]-test_scores[i]))\n",
    "\n",
    "avg_diff = np.mean(abs_difference)\n",
    "avg_test_score = np.mean(test_scores)\n",
    "avg_train_score = np.mean(train_scores)\n",
    "\n",
    "print(\"Average r squared for train datasets: {:.3f}\\nAverage r squared for test datasets: {:.3f}\\nAverage difference in test and train scores: {:.3f}\".format(avg_train_score,avg_test_score,avg_diff))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average r squared for train datasets: 0.303\n",
      "Average r squared for test datasets: 0.184\n",
      "Average difference in test and train scores: 0.198\n"
     ]
    }
   ],
   "source": [
    "#Train test split for multivariable regression: predicting cpos_norm from GDP per capita,\n",
    "#Gini index, population density, and unemployment rates\n",
    "n_tts2 = 100\n",
    "multi_test_scores=[]\n",
    "multi_train_scores=[]\n",
    "\n",
    "for i in range(n_tts2):\n",
    "    train_multi, test_multi = train_test_split(covid_data, test_size = 0.20)\n",
    "    regressor_multi = LinearRegression().fit(train_multi[['gdp_per_cap', 'gini_index'\n",
    "                                                     , 'pop_density', 'unemploy_rates']], train_multi['cpos_norm'])\n",
    "    multi_train_scores.append(regressor_multi.score(train_multi[['gdp_per_cap', 'gini_index'\n",
    "                                                     , 'pop_density', 'unemploy_rates']], train_multi['cpos_norm']))\n",
    "    #testing\n",
    "    multi_test_scores.append(regressor_multi.score(test_multi[['gdp_per_cap', 'gini_index', 'pop_density', 'unemploy_rates']],test_multi['cpos_norm']))\n",
    "\n",
    "m_abs_difference=[]\n",
    "for i in range(n_tts2):\n",
    "    m_abs_difference.append(abs(multi_train_scores[i]-multi_test_scores[i]))\n",
    "\n",
    "avg_diff2 = np.mean(m_abs_difference)\n",
    "avg_test_score2 = np.mean(multi_test_scores)\n",
    "avg_train_score2 = np.mean(multi_train_scores)\n",
    "\n",
    "print(\"Average r squared for train datasets: {:.3f}\\nAverage r squared for test datasets: {:.3f}\\nAverage difference in test and train scores: {:.3f}\".format(avg_train_score2,avg_test_score2,avg_diff2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Permutation test\n",
    "Here, we perform a permutation test for analysis 5: Using GDP per capita, Gini index, population density, and unemployment rates to predict the cumulative positive COVID cases per capita.  Permutation tests are run by shuffling the outputs, i.e. assigning each country a random cumulative positive COVID rate.  \n",
    "\n",
    "We chose to focus on analysis 5 as this was the model that performed the best of all our linear regressions.  The purpose here is to test the null hypothesis, the chance that the trend we found is a result of random chance.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a function to randomize outputs\n",
    "def permute(input_array):\n",
    "    # shuffle is inplace, so copy to preserve input\n",
    "    permuted = input_array.copy()\n",
    "    np.random.shuffle(permuted)\n",
    "    return permuted\n",
    "\n",
    "#generating permutations\n",
    "n_perm = 10000\n",
    "gdp_perm_coefs = []\n",
    "gini_perm_coefs = []\n",
    "pop_perm_coefs = []\n",
    "rates_perm_coefs = []\n",
    "\n",
    "for i in range(n_perm):\n",
    "    perm = permute(np.array(covid_data[[\"cpos_norm\"]]))\n",
    "    perm_model=LinearRegression().fit(covid_data[['gdp_per_cap', 'gini_index', 'pop_density', 'unemploy_rates']],perm)\n",
    "    gdp_perm_coefs.append(perm_model.coef_[0,0])\n",
    "    gini_perm_coefs.append(perm_model.coef_[0,1])\n",
    "    pop_perm_coefs.append(perm_model.coef_[0,2])\n",
    "    rates_perm_coefs.append(perm_model.coef_[0,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual GDP coefficient: 6.376E-07\n",
      "Percentage of coefficients equal to or greater than this: 0.0000%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#figuring out percent chance that gdp coefficient would result from random chance\n",
    "count_gdp=0\n",
    "for i in gdp_perm_coefs:\n",
    "    if i>=6.376*10**-7:\n",
    "        count_gdp+=1\n",
    "perc_gdp=count_gdp/n_perm * 100\n",
    "\n",
    "        \n",
    "plt.hist(gdp_perm_coefs, bins=30);\n",
    "plt.title(\"Distribution of GDP coefficients\");\n",
    "plt.axvline(x=(6.37*10**-7), color=\"red\", label=\"actual coefficient\")\n",
    "plt.legend(loc=1)\n",
    "print(\"Actual GDP coefficient: 6.376E-07\\nPercentage of coefficients equal to or greater than this: {:.4f}%\".format(perc_gdp))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since none of the 10,000 permutations yielded a GDP coefficient greater than what we found, this suggests that the GDP coefficient is statistically significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual Gini coefficient: -7.082E-04\n",
      "Percentage of coefficients equal to or less than this: 1.84%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#figuring out percent chance that Gini coefficient would result from random chance\n",
    "count_gini=0\n",
    "for i in gini_perm_coefs:\n",
    "    if i<=-7.082*10**-4:\n",
    "        count_gini+=1\n",
    "perc_gini=count_gini/n_perm * 100\n",
    "\n",
    "plt.hist(gini_perm_coefs, bins=30);\n",
    "plt.title(\"Distribution of Gini coefficients\");\n",
    "plt.axvline(x=(-7.08*10**-4), color=\"red\", label=\"actual coefficient\")\n",
    "plt.legend()\n",
    "print(\"Actual Gini coefficient: -7.082E-04\\nPercentage of coefficients equal to or less than this: {:.2f}%\".format(perc_gini))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coefficient in our multivariate model for the Gini index coefficient was less than or equal to less than 2 percent of the randomized coefficients (this coefficient was negative).  This indicates that this coefficient is statistically significant. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual population density coefficient: -4.363E-07\n",
      "Percentage of coefficients equal to or less than this: 51.21%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#figuring out percent chance that population density coefficient would result from random chance\n",
    "count_pop=0\n",
    "for i in pop_perm_coefs:\n",
    "    if i<=-4.363*10**-7:\n",
    "        count_pop+=1\n",
    "perc_pop=count_pop/n_perm * 100\n",
    "\n",
    "plt.hist(pop_perm_coefs, bins=30);\n",
    "plt.axvline(x=(-4.363*10**-7), color=\"red\", label=\"actual coefficient\")\n",
    "plt.legend()\n",
    "plt.title(\"Distribution of Population Density coefficients\");\n",
    "print(\"Actual population density coefficient: -4.363E-07\\nPercentage of coefficients equal to or less than this: {:.2f}%\".format(perc_pop))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The population density coefficient found in our multivariate regression is not at all statistically significant.  It is very close to zero, and it is right in the middle of the distribution of randomized coefficients.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual Unemployment Rate coefficient: 1.140E-03\n",
      "Percentage of coefficients equal to or greater than this: 1.92%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#figuring out percent chance that unemployment rate coefficient would result from random chance\n",
    "count_rates=0\n",
    "for i in rates_perm_coefs:\n",
    "    if i>=1.14*10**-3:\n",
    "        count_rates+=1\n",
    "perc_rates=count_rates/n_perm * 100\n",
    "\n",
    "plt.hist(rates_perm_coefs, bins=30);\n",
    "plt.axvline(x=(1.14*10**-3), color=\"red\", label=\"actual coefficient\")\n",
    "plt.legend(loc=2)\n",
    "plt.title(\"Distribution of Unemployment Rate coefficients\");\n",
    "print(\"Actual Unemployment Rate coefficient: 1.140E-03\\nPercentage of coefficients equal to or greater than this: {:.2f}%\".format(perc_rates))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Only 1.83% of the permutations having an unemployment rate coefficient greater than or equal to ours, which indicates statistical significance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation of Significance (ANOVA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Effect Sizes (η^2) \n",
    "\n",
    "Now that we have determined that GDP per capita and Gini index both have a significant effect on a country's cumulative positive rate per capita, we want to also find out each factor's effect size (η^2), or __the proportion of the total variance in the scores that can be accounted for by the treatment (i.e. the factor itself)__.\n",
    "\n",
    "From statistics we've learned that effect size (η) = Sum of squares (A)/ (sum of squares(A) + sum of squares(Residual)), where A is the desired factor:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Effect Size of GDP per Capita:0.342\n",
      "The Effect Size of Gini index:0.068\n"
     ]
    }
   ],
   "source": [
    "gdp_ss=0.032799\n",
    "gini_ss=0.004625\n",
    "residual_ss=0.063167\n",
    "\n",
    "η2_gdp=gdp_ss/(gdp_ss+residual_ss)\n",
    "η2_gini=gini_ss/(gini_ss+residual_ss)\n",
    "\n",
    "print('The Effect Size of GDP per Capita:{:.3f}'.format(η2_gdp))\n",
    "print('The Effect Size of Gini index:{:.3f}'.format(η2_gini))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The effect sizes shows that roughly 34.2% of the total variance in the cumulative positive rates per capita can be accoutned for by the differences in GDP per capita, while that proportion for Gini index is only 6.8%. Compared to Gini index, GDP per capita has a greater effect on the dependent variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Visual Representation of Categorical Data \n",
    "\n",
    "Although it is hard to plot ANOVA results, we can instead visualize our data by graphing the means of cumulative positive cases per capita against both Gini index levels and GDP per capita levels, and compare the graphs to ANOVA results in order to get further insights. Below are two versions of the same graph idea. The first has the Gini levels on the x-axis and GDP per capita levels as different colors on the graph, while the second is the exact opposite."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.factorplots import interaction_plot\n",
    "import matplotlib.pyplot as plt\n",
    "fig = interaction_plot(x=anova_df['gini_group'], trace=anova_df['gdp_group'], response=anova_df['cpos_norm'], \n",
    "    colors=['#4c061d','#d17a22', '#b4c292'])\n",
    "plt.title('the effect of Gini index on mean of cumulative positive per capita')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This first graph above generally matches the ANOVA results: when Gini level is constant, change in GDP per Capita also does signficantly change the mean of cumulative positive cases per capita, thus proving the significant effect of GDP per capita found in ANOVA.\n",
    "\n",
    "However, the graph also shows that within the same Gini index level, the higher GDP per capita of a country, the higher the cumulative positive cases per capita, which is rather surprising. Moreover, despite the lack of interaction effect, Gini index seem to not matter when GDP per capita level is low. Both findings are worth analyzing in the discussion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig2 = interaction_plot(x=anova_df['gdp_group'], trace=anova_df['gini_group'], response=anova_df['cpos_norm'], \n",
    "    colors=['#4c061d','#d17a22', '#b4c292'])\n",
    "plt.title('the effect of GDP per capita on mean of cumulative positive per capita')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This second graph is more surprising than the first one. First, the lowest Gini level yields the highest positive cases per capita within every GDP level. Second, despite ANOVA result suggests that there is no interaction, the high Gini level seems to have a stronger effect (i.e. yielding more cases per capita) when the GDP level is high, while having a weaker effect (i.e. yielding fewer cases per capita) when the GDP level is medium and low. In fact, at GDP level = low, medium and low Gini levels has the same effect on the dependent variable. Both findings are worth analyzing in the discussion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Tukey HSD Tests\n",
    "\n",
    "Since the two-way ANOVA test could only tell us GDP per capita and Gini index are significant, but __not also how exactly different levels (high/med/low) of GDP per capita and Gini index affect cumulative positive rate per capita__, we decide to perform two post-hoc tests, one for each indepedent variable. And the tests are a Tukey Honestly-Significant-Difference (Tukey HSD) Test.\n",
    "\n",
    "##### What is a Tukey HSD Test?\n",
    "\n",
    "A Tukey HSD (Honest Significant Difference) Test can be used to \"find means that are significantly different from each other.\" \n",
    "\n",
    "In our case, for each factor, a Tukey HSD Test is used to compars the Covid cases means under all possible level pairs. The first Test below performs comparisons for high vs. low, high vs. medium and low vs. medium GDP per capita pairs. The second Test compares the same pairs of levels for Gini Index."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first Tukey HSD Test, for __GDP per capita__:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Multiple Comparison of Means - Tukey HSD, FWER=0.05</caption>\n",
       "<tr>\n",
       "  <th>group1</th> <th>group2</th> <th>meandiff</th> <th>p-adj</th>  <th>lower</th>   <th>upper</th>  <th>reject</th>\n",
       "</tr>\n",
       "<tr>\n",
       "   <td>high</td>    <td>low</td>   <td>-0.0443</td> <td>0.001</td> <td>-0.0558</td> <td>-0.0328</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "   <td>high</td>    <td>med</td>   <td>-0.0199</td> <td>0.001</td> <td>-0.0314</td> <td>-0.0084</td>  <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "    <td>low</td>    <td>med</td>   <td>0.0244</td>  <td>0.001</td> <td>0.0129</td>  <td>0.0359</td>   <td>True</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.stats.multicomp import pairwise_tukeyhsd\n",
    "\n",
    "# perform multiple pairwise comparison (Tukey HSD) for GDP per cap\n",
    "m_comp_gdp = pairwise_tukeyhsd(endog=anova_df['cpos_norm'], groups=anova_df['gdp_group'], alpha=0.05)\n",
    "m_comp_gdp.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This first Tukey HSD test returns a table that compares different pairs of GDP per capita levels (high vs. low, high vs. med, and low vs. med), and lists out each pair's mean difference (meandiff), p-value of the difference (p-adj) and the lower and upper bounds of the confidence intervals at 95% of mean difference (lower, upper). Also, it shows whether the null hypothesis that there is no sigfinicant difference between each pair's values should be rejected (reject).\n",
    "\n",
    "P.S. We continue to adopt a significance level of 0.05. But thanks to the function's convenient \"reject\" column, there is no need to manually compare 0.05 to p-adj.\n",
    "\n",
    "From this table, we can infer that there are significant differences between the means of:\n",
    "\n",
    "high and low GDP per capita\n",
    "high and medium GDP per capita\n",
    "low and medium GDP per capita\n",
    "Also, among the three significant differences, the mean difference between high and low GDP is the highest (-0.0443)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second Tukey HSD Test, for __GDP per capita__:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Multiple Comparison of Means - Tukey HSD, FWER=0.05</caption>\n",
       "<tr>\n",
       "  <th>group1</th> <th>group2</th> <th>meandiff</th>  <th>p-adj</th>  <th>lower</th>   <th>upper</th>  <th>reject</th>\n",
       "</tr>\n",
       "<tr>\n",
       "   <td>high</td>    <td>low</td>   <td>0.0253</td>   <td>0.001</td> <td>0.0117</td>  <td>0.0389</td>   <td>True</td> \n",
       "</tr>\n",
       "<tr>\n",
       "   <td>high</td>    <td>med</td>   <td>0.0051</td>  <td>0.6398</td> <td>-0.0085</td> <td>0.0187</td>   <td>False</td>\n",
       "</tr>\n",
       "<tr>\n",
       "    <td>low</td>    <td>med</td>   <td>-0.0202</td> <td>0.0017</td> <td>-0.0338</td> <td>-0.0066</td>  <td>True</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_comp_gini = pairwise_tukeyhsd(endog=anova_df['cpos_norm'], groups=anova_df['gini_group'], alpha=0.05)\n",
    "m_comp_gini.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to the Tukey HSD Test for GDP per capita, the same Test for Gini index also returns a table with the same attributes. From this table, we can infer that there are significant differences between the means of:\n",
    "\n",
    "high and low Gini index\n",
    "low and medium Gini index\n",
    "There is not a significant difference between the means of:\n",
    "\n",
    "high and medium Gini index\n",
    "This lack of significant difference can be seen on the second graph in the visual representation section above (reflected by the crossing of the purple and green lines). \n",
    "\n",
    "Also, between the two significant differences, the mean difference between high and low Gini index is the highest (0.0253)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interpretation and Conclusions\n",
    "#### Linear Regressions: \n",
    "Before performing a multivariable regression, we initially tried predicting the cumulative positive COVID cases per capita based on GDP per capita, Gini index, population density, and unemployment rates separately (analyses 1, 2, 3, and 4). The closer that an $r^2$ score is to 1.0, or 100%, the more significant the model would be.  The $r^2$ scores of predicting positive COVID cases based on population density and unemployment rates separately were very small (0.0006 and 0.0083, respectively).  This shows that these two predictors alone do not tell us much about cumulative COVID cases per capita.  The $r^2$ scores of predicting positive COVID cases based on GDP per capita and Gini index were 0.242 and 0.10, respectively.  These values show a low correlation, but are not completely negligible, particularly the cumulative positives vs GDP model.  Surprisingly, we found that countries with higher GDPs were more likely to have higher COVID rates.  \n",
    "To assess the significance of the GDP per capita vs cumulative positive covid cases per capita, we used train test split to see if our model was overfitted.  Since the average $r^2$ value for the trained group was significantly higher than the average $r^2$ value for the test group (0.245 vs 0.195), this signifies that this model may be overfitted.\n",
    "\n",
    "#### Multivariable Regressions:\n",
    "When trying to use the GDP per capita, Gini index, unemployment rates, and population density to predict the cumulative positive cases of a country, the resulting $r^2$ score from the multivariable regression was 0.2982 (analysis 5). This is a small correlation, but still signifies a trend. \n",
    "\n",
    "We also tried to predict the cumulative number of deaths from COVID per capita based on the GDP per capita, Gini index, unemployment rate, and population density of countries (analysis 6), however this resulted in a lower $r^2$ score of 0.1914. Lastly, in one final multi-model, we took the same predictors to try and predict the ratio of cumulative positive cases to the cumulative number of deceased people from COVID (analysis 7).  But, the model resulted in an even lower $r^2$ score of around 0.0244. This was less significant than the both of the prior multi-models. \n",
    "Applying these results to the real-world context, it would mean that even though we may have assumed that countries with a lower GDP per capita and Gini index might have more cumulative positive cases or cumulative deceased people from COVID compared to countries with higher values, based on the multi-models these were incorrect assumptions to make. All three of the regressions performed ended up being insignificant, which showed that a country's GDP and Gini index has close to no effect on their cumulative number of COVID cases as well as deaths. \n",
    "To assess the significance of this, we used train test split to see if our model was overfitted.  Since the average $r^2$ value for the trained group was significantly higher than the average $r^2$ value for the test group (0.304 vs 0.194), this signifies that this model may be overfitted.\n",
    "\n",
    "We used permutation testing to test the chances that the trends we found in our most robust model (analysis 5) occured by chance.  We did so by shuffling the covid positives cases, assigning random rates to countries 10,000 times and looking at the coefficients for each variable in these cases.  We found that the likelihood of getting a GDP coefficient greater than or equal to what we found, 6.376E-07, was 0%.  This means that not a single one of our random permutations produced a slope greater than or equal to this for GDP per capita.  For Gini index, 1.62% of the randomly permuted slopes were less than or equal to our actual slope of -7.082E-04.  For unemployment rates, 1.97% of the randomly permuted slopes were greater than the actual slope of 1.140E-03.  This signifies that all of these coefficients were significant and were very unlikely to have occured from chance.  For population density, there was a high likelihood of a random slope being greater than our observed slope of -4.363E-07, which means that our slope was not statistically significant.  \n",
    "\n",
    "#### Two-Way ANOVA Test:\n",
    "Through a two-way ANOVA test, we found that __both a country's GDP per capita and Gini Index cause significant difference__ on that country's cumulative positive cases per capita. Speficically, the significant effect by GDP per capita is __relatively stronger__ (F(2,126) = 32.69, p<0.05, η^2=34.2%), while the significant effect by Gini Index is __relatively weaker__ (F(2,126) = 4.61, p<0.05, η^2=6.8%). __We did not find a significant interaction effect__ between GDP per capita and Gini Index (F(4,126) = 0.45, p>0.05).\n",
    "\n",
    "Through a Tukey HSD test, we also found that all pairwise comparisons of different levels of __GDP per capita__  result in significant mean differences of a country's cumulative positive cases per capita, specifically the __high vs. low__ (meandiff=-0.0443), __high vs. medium__ (meandiff=-0.0199), and __low vs. medium__ (meandiff=0.0244) GDP per capita pairs. For the __Gini index__ levels, only the __high vs. low__ (meanfidd=0.0253) and __low vs. medium__ (0.0051) pairs yield significant mean value differences; the __high vs. medium__ (meandiff=0.0202) pair __yields no significant mean value difference__.\n",
    "\n",
    "Within the same Gini index level (and true to every Gini index level), the __higher the GDP per capita level__, the __higher the country's cumulative positive cases per capita__. \n",
    "\n",
    "Across all GDP per capita levels, the __low Gini level always yields the highest number of per capita cases__. When GDP per capita = high, the ranking of number of positive per capita cases from high to low is at low Gini > high Gini >medium Gini. When GDP per capita = medium, the ranking is at low Gini > medium Gini >high Gini. When GDP per capita =low, medium and high Gini indexes yield the same number of per capita cases.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "The results come out as a surprise for us. We originally hypothesized that countries with higher GDP per capita (i.e. better economy and personal wealth) would yiled lower Covid positive cases per capita, because we assumed that  \n",
    "1. people from those countries would share higher affordability of masks, sanitizers and other Covid essentials,\n",
    "2. those countries usually provide better healthcare.\n",
    "We also hypothesized that a combination of low Gini Index (i.e. higher equality in terms of wealth distribution) and high GDP per capita would have lower Covid positive cases per capita, assuming that \n",
    "1. this combination would mean fewer groups in poverty,\n",
    "2. high Gini index alone (without medium or high GDP per capita) would probably yield higher numbers per capita due to \"equal\" lack of resources. \n",
    "\n",
    "However, the tests show just the opposite. \n",
    "\n",
    "First, within the same Gini level, the higher the level of GDP per capita, the higher the number of positive cases per capita. We believe that there are several factors that could possibly explain this significant effect:\n",
    "1. many countries with high GDP per capita (e.g. the U.S. and Western European countries) are also the ones that run the most Covid tests and do so most frequently; this would lead to higher sample sizes per capita, which would in turn result in higher per capita positive cases.\n",
    "2. many of those countries are also well-developed and have shrinking population age pyramids (i.e. has a higher percentage of elderly population; e.g. Japan). Since Covid-positive elderlies are more susceptible of developing (severe) symptoms, the percentage of those countries' Covid-positive population who feel and report symptons would naturally be higher. In other words, in low GDP per capita countries (i.e. having lower % of elderly population), there might be a higher % of asymptomatic positive cases that are never reported or tested. For our next phase, we would further explore this idea by performing statistical tests on death rates per capita vs. GDP per capita.\n",
    "3. There are other external variables that may influence the results.\n",
    "\n",
    "Second, the low Gini index countries (i.e. more equal wealth distribution) yield the highest number of per capita cases, c.b. This main effect can also be explained by the factors above, as most countries on this Gini index level also have high GDP per capita. This significant effect, however, is relatively weak, as indicated by both its small effect size (6.8%) and the p-value (0.011). Also, it is important to note that Gini Index would only have a significant effect with the significance level = 0.05. If we were to set the level to the more conservative 0.01, from 0.011>0.01 we would have concluded that this main effect is not significant. Therefore between the two significant factors, GDP per capita––not Gini index––is the dominant factor that influences cumulative positive cases per capita.\n",
    "\n",
    "Third, as shown by ANOVA, the fact that there is no significant interaction between GDP per capita and Gini index suggests that the strength of GDP per capita's effect does not depend on the state (level) of Gini index, and vice versa. However, the two graphs seem to contradict with this finding: the high and medium Gini index lines do cross at GDP per capita level = low. In other words, it seems that Gini index depends on the level of GDP per capita. Below are some analysis and possible reasons why such contradiction exists:\n",
    "1. At GDP level = high, high Gini countries yield more cases than medium Gini countries do. This likely occurs because of two reasons: \n",
    "\n",
    "\n",
    "    * high GDP per capita means those countries have been capable of conduct more testings (and therefore have more positive cases per capita)\n",
    "    \n",
    "    * high Gini means high inequalities in wealth distribution, high percentage of low-income households and severe social conflicts. Since Covid \"discriminates\" against the non-privileged, the small upper- and upper-middle class (who contribute significantly to the high GDP per capita) have the resource and savings to protect themselves from covid, while the vast lowermiddle- and lower class people suffer the greatest. Take China and South Africa as examples: both countries fall in the high GDP per capita-high Gini index category and have very high per capita cases numbers.\n",
    "    \n",
    "    \n",
    "2. As GDP per capita level decreases from high, to medium, then to low, the main effect of Gini index gradually decreases, because––as analyzed above––GDP per capita plays a bigger role of influencing the results. When GDP per capita is low, no matter how high the Gini indexes are, the fact that many of those countries are not able to provide accessible Covid testing deems the low positive cases per capita number. __This can also explain the lack of mean difference between the high and medium Gini index levels, as found by the Tukey HSD test.__\n",
    "\n",
    "\n",
    "3. The contradiction between ANOVA results and the graph/Tukey HSD may be caused by the fact that there are other independent variables, not the interaction between GDP per capita and Gini index, that lead to the results. The line-crossing on the second graph could thus possibly be explained by other factors such as government policies and population density.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Limitations\n",
    "- Not all countries have reported a Gini index, GDP per capita, population, population density, or unemployment rate value, so this is not representative of the whole world.  We used 135 out of 195 countries for our analysis.\n",
    "- Some countries’ values are more up-to-date than others.\n",
    "- Some countries may also have low life expectancies due to many social, political and environmental factors. A country’s high COVID death rate may thus also be influenced by its low life expectancy.\n",
    "- Some countries might have less accurate COVID data than others.\n",
    "- Because the original dataset is updated daily, the dataset we have saved will not have all current COVID data, and may not be accurate to the present day. \n",
    "- Policy and government response likely influences COVID rates significantly, but we did not account for this in our analysis.\n",
    "- Some countries may have had more testing, which could have also effected the number of reported cumulative cases/deaths."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Source Code\n",
    "All code was shared in the following Google Drive folder, in addition to having the prior project phases. \n",
    "https://drive.google.com/drive/folders/1OAunMYE2SKDuoehcmpewYIPKlBWcg3fU?usp=sharing\n",
    "\n",
    "\n",
    "The data was sourced from the following sites:\n",
    "\n",
    "Covid data source: https://github.com/ec-jrc/COVID-19/blob/master/data-of-world/jrc-covid-19-world-latest.csv  \n",
    "This dataset contains COVID-19 data of each country in the world, with columns such as cumulative positive cases and hospitalizations.  \n",
    "\n",
    "Gini index data source: https://data.worldbank.org/indicator/SI.POV.GINI/?end=2018&start=2015 \n",
    "This dataset contains the Gini index for each country for which it is available.\n",
    "\n",
    "GDP per capita data source: https://data.worldbank.org/indicator/NY.GDP.PCAP.CD \n",
    "note: for this data set, we had to remove the final column (2020), which had no data in it to avoid errors.  This dataset contains the gross domestic product per capita of each country.\n",
    "\n",
    "Population data source: https://data.worldbank.org/indicator/SP.POP.TOTL \n",
    "This dataset contains the population for each country for which it is available.\n",
    "\n",
    "Population density data source: https://data.worldbank.org/indicator/EN.POP.DNST\n",
    "This dataset contains the population density for each country for which it is available.\n",
    "\n",
    "Unemployment rates data source: https://data.worldbank.org/indicator/SL.UEM.TOTL.ZS\n",
    "This dataset contains the unemployment rate for each country for which it is available."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Acknowledgements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Code from INFO 2950 lectures inspired our code in several places, including the train test split method. \n",
    "\n",
    "* Websites that provide code instructions for running ANOVA and Tukey HSD Tests in Python: \n",
    "    * https://www.scribbr.com/statistics/two-way-anova/;\n",
    "    * https://www.statology.org/two-way-anova-python/; \n",
    "    * https://www.reneshbedre.com/blog/anova.html\n",
    "    * https://towardsdatascience.com/anova-tukey-test-in-python-b3082b6e6bda\n",
    "\n",
    "* Websites that provide precise definitions of key terms (two-way ANOVA, Gini index, GDP per capita):\n",
    "    * https://en.wikipedia.org/wiki/Two-way_analysis_of_variance\n",
    "    * https://www.investopedia.com/terms/g/gini-index.asp\n",
    "    * https://www.thebalance.com/gdp-per-capita-formula-u-s-compared-to-highest-and-lowest-3305848\n",
    "* One of our group members' PSYCH 2500 (a Cornell Statistics course) notes helped us understand ANOVA and Tukey HSD Tests:\n",
    "https://docs.google.com/document/d/1G9PD4IQCVQ1DxbL8vmCS6QnooiXl2DRXPqPpMn5wCAk/edit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
